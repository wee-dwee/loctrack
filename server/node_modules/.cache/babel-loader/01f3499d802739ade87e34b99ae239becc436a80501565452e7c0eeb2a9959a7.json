{"ast":null,"code":"var _jsxFileName = \"/Users/dweejpandya/family-location-pwa/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n// Function to get the actual GPS coordinates using the Geolocation API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getLocation = (successCallback, errorCallback) => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  } else {\n    errorCallback(\"Geolocation is not supported by this browser.\");\n  }\n};\n\n// Function to encode data to Base64\nconst encodeData = (latitude, longitude) => {\n  const data = `${latitude},${longitude}`;\n  return btoa(data); // Base64 encode the coordinates\n};\n\n// Function to send location to the backend\nconst sendLocationToServer = (latitude, longitude, memberName) => {\n  const encodedLocation = encodeData(latitude, longitude);\n  axios.post('http://localhost:5002/api/location', {\n    name: memberName,\n    location: encodedLocation // Sending encoded coordinates\n  }).then(response => {\n    console.log('Location sent successfully:', response.data);\n  }).catch(error => {\n    console.error('Error sending location:', error);\n  });\n};\n\n// Function to open Google Maps with the given coordinates\nconst openMap = (latitude, longitude) => {\n  const url = `https://www.google.com/maps?q=${latitude},${longitude}`;\n  window.open(url, '_blank');\n};\nfunction App() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [isNameEntered, setIsNameEntered] = useState(false);\n  const [usersList, setUsersList] = useState([]);\n  const [location, setLocation] = useState({\n    latitude: null,\n    longitude: null\n  });\n\n  // Handle name input change\n  const handleNameChange = event => {\n    setUserName(event.target.value);\n  };\n\n  // Handle name submission\n  const handleSubmitName = () => {\n    if (userName.trim()) {\n      setIsNameEntered(true);\n      // Fetch all users and their locations\n      fetchUsersLocations();\n    } else {\n      alert(\"Please enter your name.\");\n    }\n  };\n\n  // Fetch all users and their locations from the backend\n  const fetchUsersLocations = () => {\n    axios.get('http://localhost:5002/api/locations').then(response => {\n      setUsersList(response.data);\n    }).catch(error => {\n      console.error('Error fetching locations:', error);\n    });\n  };\n\n  // Start location update interval and fetching locations\n  useEffect(() => {\n    if (isNameEntered) {\n      const locationInterval = setInterval(() => {\n        // Update user location every 10 seconds\n        getLocation(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          console.log(`${userName}'s location: Latitude: ${latitude}, Longitude: ${longitude}`);\n          setLocation({\n            latitude,\n            longitude\n          });\n          sendLocationToServer(latitude, longitude, userName);\n        }, error => {\n          alert(`Error: ${error.message}`);\n        });\n      }, 10000); // Update every 10 seconds\n\n      const usersInterval = setInterval(() => {\n        // Fetch all users and their locations every 10 seconds\n        fetchUsersLocations();\n      }, 10000); // Fetch users every 10 seconds\n\n      // Cleanup on component unmount\n      return () => {\n        clearInterval(locationInterval);\n        clearInterval(usersInterval);\n      };\n    }\n  }, [isNameEntered, userName]); // Only start intervals once the name is entered\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Family Location Tracker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), !isNameEntered ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter your name\",\n        value: userName,\n        onChange: handleNameChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmitName,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", userName, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => openMap(location.latitude, location.longitude),\n        children: \"Your Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendLocationToServer(location.latitude, location.longitude, userName),\n        children: \"Update Your Location Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Family Members\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this), usersList.map((user, index) => user.name.trim().toUpperCase() !== userName.trim.toUpperCase() &&\n        /*#__PURE__*/\n        // Exclude user's own name\n        _jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [user.name, \" - Latitude: \", user.latitude, \", Longitude: \", user.longitude]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => openMap(user.latitude, user.longitude),\n            children: [\"View \", user.name, \"'s Location on Google Maps\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oHkumHPGywiw9iDtZWWTd2XBzf8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","getLocation","successCallback","errorCallback","navigator","geolocation","getCurrentPosition","encodeData","latitude","longitude","data","btoa","sendLocationToServer","memberName","encodedLocation","post","name","location","then","response","console","log","catch","error","openMap","url","window","open","App","_s","userName","setUserName","isNameEntered","setIsNameEntered","usersList","setUsersList","setLocation","handleNameChange","event","target","value","handleSubmitName","trim","fetchUsersLocations","alert","get","locationInterval","setInterval","position","coords","message","usersInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","user","index","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/dweejpandya/family-location-pwa/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\n// Function to get the actual GPS coordinates using the Geolocation API\nconst getLocation = (successCallback, errorCallback) => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  } else {\n    errorCallback(\"Geolocation is not supported by this browser.\");\n  }\n};\n\n// Function to encode data to Base64\nconst encodeData = (latitude, longitude) => {\n  const data = `${latitude},${longitude}`;\n  return btoa(data);  // Base64 encode the coordinates\n};\n\n// Function to send location to the backend\nconst sendLocationToServer = (latitude, longitude, memberName) => {\n  const encodedLocation = encodeData(latitude, longitude);\n\n  axios.post('http://localhost:5002/api/location', {\n    name: memberName,\n    location: encodedLocation  // Sending encoded coordinates\n  })\n    .then((response) => {\n      console.log('Location sent successfully:', response.data);\n    })\n    .catch((error) => {\n      console.error('Error sending location:', error);\n    });\n};\n\n// Function to open Google Maps with the given coordinates\nconst openMap = (latitude, longitude) => {\n  const url = `https://www.google.com/maps?q=${latitude},${longitude}`;\n  window.open(url, '_blank');\n};\n\nfunction App() {\n  const [userName, setUserName] = useState('');\n  const [isNameEntered, setIsNameEntered] = useState(false);\n  const [usersList, setUsersList] = useState([]);\n  const [location, setLocation] = useState({ latitude: null, longitude: null });\n\n  // Handle name input change\n  const handleNameChange = (event) => {\n    setUserName(event.target.value);\n  };\n\n  // Handle name submission\n  const handleSubmitName = () => {\n    if (userName.trim()) {\n      setIsNameEntered(true);\n      // Fetch all users and their locations\n      fetchUsersLocations();\n    } else {\n      alert(\"Please enter your name.\");\n    }\n  };\n\n  // Fetch all users and their locations from the backend\n  const fetchUsersLocations = () => {\n    axios.get('http://localhost:5002/api/locations')\n      .then((response) => {\n        setUsersList(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching locations:', error);\n      });\n  };\n\n  // Start location update interval and fetching locations\n  useEffect(() => {\n    if (isNameEntered) {\n      const locationInterval = setInterval(() => {\n        // Update user location every 10 seconds\n        getLocation(\n          (position) => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            console.log(`${userName}'s location: Latitude: ${latitude}, Longitude: ${longitude}`);\n            setLocation({ latitude, longitude });\n            sendLocationToServer(latitude, longitude, userName);\n          },\n          (error) => {\n            alert(`Error: ${error.message}`);\n          }\n        );\n      }, 10000); // Update every 10 seconds\n\n      const usersInterval = setInterval(() => {\n        // Fetch all users and their locations every 10 seconds\n        fetchUsersLocations();\n      }, 10000); // Fetch users every 10 seconds\n\n      // Cleanup on component unmount\n      return () => {\n        clearInterval(locationInterval);\n        clearInterval(usersInterval);\n      };\n    }\n  }, [isNameEntered, userName]);  // Only start intervals once the name is entered\n\n  return (\n    <div className=\"App\">\n      <h1>Family Location Tracker</h1>\n\n      {!isNameEntered ? (\n        <div>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            value={userName}\n            onChange={handleNameChange}\n          />\n          <button onClick={handleSubmitName}>Submit</button>\n        </div>\n      ) : (\n        <div>\n          <h2>Welcome, {userName}!</h2>\n          <button onClick={() => openMap(location.latitude, location.longitude)}>\n            Your Location\n          </button>\n          <button onClick={() => sendLocationToServer(location.latitude, location.longitude, userName)}>\n            Update Your Location Now\n          </button>\n          <div className=\"buttons\">\n            <h3>Family Members</h3>\n            {usersList.map((user, index) => (\n              user.name.trim().toUpperCase() !== userName.trim.toUpperCase() && ( // Exclude user's own name\n                <div key={index}>\n                  <p>{user.name} - Latitude: {user.latitude}, Longitude: {user.longitude}</p>\n                  <button onClick={() => openMap(user.latitude, user.longitude)}>\n                    View {user.name}'s Location on Google Maps\n                  </button>\n                </div>\n              )\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}