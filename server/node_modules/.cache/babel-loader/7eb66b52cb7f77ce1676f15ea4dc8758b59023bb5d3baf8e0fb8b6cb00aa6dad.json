{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\n\n// Create the express app\nconst app = express();\nconst port = 5002;\n\n// MongoDB connection URI\nconst mongoURI = 'mongodb+srv://dweejpandya:<your_password>@cluster0.prz5r.mongodb.net/';\n\n// Connect to MongoDB\nmongoose.connect(mongoURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('Connected to MongoDB')).catch(err => console.log(err));\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Schema to store family member locations\nconst locationSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    unique: true\n  },\n  latitude: Number,\n  longitude: Number,\n  timestamp: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst Location = mongoose.model('Location', locationSchema);\n\n// Function to decode Base64-encoded data\nconst decodeData = encodedData => {\n  const decodedData = Buffer.from(encodedData, 'base64').toString(); // Decode Base64\n  const [latitude, longitude] = decodedData.split(',');\n  return {\n    latitude: parseFloat(latitude),\n    longitude: parseFloat(longitude)\n  };\n};\n\n// Endpoint to receive location updates\napp.post('/api/location', async (req, res) => {\n  const {\n    name,\n    location\n  } = req.body;\n  if (!name || !location) {\n    return res.status(400).send('Missing location data');\n  }\n\n  // Decode the location data\n  const {\n    latitude,\n    longitude\n  } = decodeData(location);\n  try {\n    // Update or create the user's location\n    const user = await Location.findOneAndUpdate({\n      name\n    }, {\n      latitude,\n      longitude,\n      timestamp: new Date()\n    }, {\n      upsert: true,\n      new: true\n    });\n    res.status(200).send('Location updated');\n  } catch (err) {\n    res.status(500).send('Error saving location');\n  }\n});\n\n// Endpoint to get the latest location of all family members\napp.get('/api/locations', (req, res) => {\n  Location.find().sort({\n    timestamp: -1\n  }) // Sort by timestamp to get the most recent locations\n  .then(locations => res.json(locations)).catch(err => res.status(500).send('Error retrieving locations'));\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","app","port","mongoURI","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","use","json","locationSchema","Schema","name","type","String","unique","latitude","Number","longitude","timestamp","Date","default","now","Location","model","decodeData","encodedData","decodedData","Buffer","from","toString","split","parseFloat","post","req","res","location","body","status","send","user","findOneAndUpdate","upsert","new","get","find","sort","locations","listen"],"sources":["/Users/dweejpandya/family-location-pwa/src/App.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\n\n// Create the express app\nconst app = express();\nconst port = 5002;\n\n// MongoDB connection URI\nconst mongoURI = 'mongodb+srv://dweejpandya:<your_password>@cluster0.prz5r.mongodb.net/';\n\n// Connect to MongoDB\nmongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch(err => console.log(err));\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Schema to store family member locations\nconst locationSchema = new mongoose.Schema({\n  name: { type: String, unique: true },\n  latitude: Number,\n  longitude: Number,\n  timestamp: { type: Date, default: Date.now }\n});\n\nconst Location = mongoose.model('Location', locationSchema);\n\n// Function to decode Base64-encoded data\nconst decodeData = (encodedData) => {\n  const decodedData = Buffer.from(encodedData, 'base64').toString();  // Decode Base64\n  const [latitude, longitude] = decodedData.split(',');\n  return { latitude: parseFloat(latitude), longitude: parseFloat(longitude) };\n};\n\n// Endpoint to receive location updates\napp.post('/api/location', async (req, res) => {\n  const { name, location } = req.body;\n\n  if (!name || !location) {\n    return res.status(400).send('Missing location data');\n  }\n\n  // Decode the location data\n  const { latitude, longitude } = decodeData(location);\n\n  try {\n    // Update or create the user's location\n    const user = await Location.findOneAndUpdate(\n      { name },\n      { latitude, longitude, timestamp: new Date() },\n      { upsert: true, new: true }\n    );\n\n    res.status(200).send('Location updated');\n  } catch (err) {\n    res.status(500).send('Error saving location');\n  }\n});\n\n// Endpoint to get the latest location of all family members\napp.get('/api/locations', (req, res) => {\n  Location.find().sort({ timestamp: -1 }) // Sort by timestamp to get the most recent locations\n    .then(locations => res.json(locations))\n    .catch(err => res.status(500).send('Error retrieving locations'));\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACA,MAAMC,QAAQ,GAAG,uEAAuE;;AAExF;AACAJ,QAAQ,CAACK,OAAO,CAACD,QAAQ,EAAE;EAAEE,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CAC5EC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAC/CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;;AAEjC;AACAV,GAAG,CAACW,GAAG,CAACZ,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACW,GAAG,CAACf,OAAO,CAACgB,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,MAAMC,cAAc,GAAG,IAAIf,QAAQ,CAACgB,MAAM,CAAC;EACzCC,IAAI,EAAE;IAAEC,IAAI,EAAEC,MAAM;IAAEC,MAAM,EAAE;EAAK,CAAC;EACpCC,QAAQ,EAAEC,MAAM;EAChBC,SAAS,EAAED,MAAM;EACjBE,SAAS,EAAE;IAAEN,IAAI,EAAEO,IAAI;IAAEC,OAAO,EAAED,IAAI,CAACE;EAAI;AAC7C,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAG5B,QAAQ,CAAC6B,KAAK,CAAC,UAAU,EAAEd,cAAc,CAAC;;AAE3D;AACA,MAAMe,UAAU,GAAIC,WAAW,IAAK;EAClC,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,EAAE,QAAQ,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAE;EACpE,MAAM,CAACd,QAAQ,EAAEE,SAAS,CAAC,GAAGS,WAAW,CAACI,KAAK,CAAC,GAAG,CAAC;EACpD,OAAO;IAAEf,QAAQ,EAAEgB,UAAU,CAAChB,QAAQ,CAAC;IAAEE,SAAS,EAAEc,UAAU,CAACd,SAAS;EAAE,CAAC;AAC7E,CAAC;;AAED;AACArB,GAAG,CAACoC,IAAI,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,MAAM;IAAEvB,IAAI;IAAEwB;EAAS,CAAC,GAAGF,GAAG,CAACG,IAAI;EAEnC,IAAI,CAACzB,IAAI,IAAI,CAACwB,QAAQ,EAAE;IACtB,OAAOD,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EACtD;;EAEA;EACA,MAAM;IAAEvB,QAAQ;IAAEE;EAAU,CAAC,GAAGO,UAAU,CAACW,QAAQ,CAAC;EAEpD,IAAI;IACF;IACA,MAAMI,IAAI,GAAG,MAAMjB,QAAQ,CAACkB,gBAAgB,CAC1C;MAAE7B;IAAK,CAAC,EACR;MAAEI,QAAQ;MAAEE,SAAS;MAAEC,SAAS,EAAE,IAAIC,IAAI,CAAC;IAAE,CAAC,EAC9C;MAAEsB,MAAM,EAAE,IAAI;MAAEC,GAAG,EAAE;IAAK,CAC5B,CAAC;IAEDR,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;EAC1C,CAAC,CAAC,OAAOhC,GAAG,EAAE;IACZ4B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;EAC/C;AACF,CAAC,CAAC;;AAEF;AACA1C,GAAG,CAAC+C,GAAG,CAAC,gBAAgB,EAAE,CAACV,GAAG,EAAEC,GAAG,KAAK;EACtCZ,QAAQ,CAACsB,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC;IAAE3B,SAAS,EAAE,CAAC;EAAE,CAAC,CAAC,CAAC;EAAA,CACrChB,IAAI,CAAC4C,SAAS,IAAIZ,GAAG,CAAC1B,IAAI,CAACsC,SAAS,CAAC,CAAC,CACtCzC,KAAK,CAACC,GAAG,IAAI4B,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,4BAA4B,CAAC,CAAC;AACrE,CAAC,CAAC;;AAEF;AACA1C,GAAG,CAACmD,MAAM,CAAClD,IAAI,EAAE,MAAM;EACrBM,OAAO,CAACC,GAAG,CAAC,sCAAsCP,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}